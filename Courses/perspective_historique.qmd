---
title: "Perspectives historiques"
format:
  html:
      out.width: 50%
---


Nous allons présenter ici quelques éléments historiques sur les méthodes de Monte-Carlo, dont les prémisses remontent au XVIIIème siècle.

## L'aiguille de Buffon

[Georges-Louis Leclerc, Comte de Buffon](https://fr.wikipedia.org/wiki/Georges-Louis_Leclerc_de_Buffon)^[[Georges-Louis Leclerc, Comte de Buffon](https://fr.wikipedia.org/wiki/Georges-Louis_Leclerc_de_Buffon): (1707-1788)
 naturaliste, mathématicien et industriel français du siècle des Lumières
<img src="https://upload.wikimedia.org/wikipedia/commons/b/b5/Georges-Louis_Leclerc_de_Buffon.jpg" width="65%" style="display: block; margin-right: auto; margin-left: auto;" alt="Portrait de Georges-Louis Leclerc, comte de Buffon.
Huile sur toile de François-Hubert Drouais, Montbard, musée Buffon." title="Portrait de Georges-Louis Leclerc, comte de Buffon.
Huile sur toile de François-Hubert Drouais, Montbard, musée Buffon."></img>]
proposa en 1733 une méthode qui s'avéra être utile pour estimer la valeur de $\pi$. On désigne de nos jours cette expérience sous le nom de **l'aiguille de Buffon**. C'est l'une des premières méthodes de Monte-Carlo référencée dans la littérature (la source du texte est disponible [ici](https://gallica.bnf.fr/ark:/12148/bpt6k10705425/f117.item) sur le site de la BNF ).

La question initiale (simplifiée ici) posée par Buffon était la suivante:
Une aiguille de taille 1 tombe sur un parquet composé de lattes de largeur $1$: quelle est alors la probabilité $P$ que l'aiguille croise une ligne de la trame du parquet ?

Le contexte original était dans celui d'un jeu à deux joueurs: un joueur parie sur le fait que l'aiguille croise une ligne de la trame du parquet, l'autre sur le fait que l'aiguille ne croise pas une ligne de la trame du parquet. L'enjeu est alors de calculer la probabilité de succès de chacun des joueurs, et de voir si le jeu est équilibré ou non.

Voilà brièvement la question que s'est posée Buffon en 1733. La réponse est donnée par la formule suivante, qui montre que le jeu qu'il propose n'est pas équilibré:

$$
P = \frac{2}{\pi} \approx 0.6366 \enspace.
$$
Une preuve de ce résultat sera donnée ci-dessous.

L'idée sous-jacente de Buffon est que si l'on répète cette expérience un grand nombre de fois, on peut approché la quantité $P$ numériquement, par exemple en proposant un estimateur $\hat{P}_n$ qui compte la proportion de chevauchement après avoir fait $n$ répétition des lancers.
Pour estimer $\pi$, il ne restera donc plus qu'à évaluer $\frac{2}{\hat{P}_n}$.

On peut faire cette expérience dans le monde réelle (c'est un peu long pour $n$ grand!), mais on peut aussi utiliser une méthode numérique pour cela.
Il s'agit alors de tirer aléatoire la position du centre de l'aiguille, puis de tirer aussi de manière aléatoire son angle de chute. On teste à la fin si l'aiguille croise une ligne de la trame du parquet ou non, et on recommence l'expérience un grand nombre de fois.

Cette méthode est donnée ci-dessous, avec un exemple interactif généré en Python.


```{python}
#| layout-ncol: 1
#| code-fold: true
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots

rng = np.random.default_rng(44)

n_samples = 200
xmax = 14.499999
xmin = -xmax


# Create the needles
centers_x = rng.uniform(xmin, xmax, n_samples)
angles = rng.uniform(0, 2 * np.pi, n_samples)
centers_y = rng.uniform(-2, 2, n_samples)

# Compute the right borders of the needles
borders_right = np.zeros((n_samples, 2))
borders_right[:, 0] = centers_x + np.cos(angles) / 2
borders_right[:, 1] = centers_y + np.sin(angles) / 2

# Compute the left borders of the needles
borders_left = np.zeros((n_samples, 2))
borders_left[:, 0] = centers_x + np.cos(angles + np.pi) / 2
borders_left[:, 1] = centers_y + np.sin(angles + np.pi) / 2

centers_x_round = np.round(centers_x)
overlap = (borders_right[:, 0] - centers_x_round) * (
    borders_left[:, 0] - centers_x_round
) < 0
overlap = np.where(overlap, 1, 0)
n_overlap = int(np.sum(overlap))


# Check if the needles cross a line
borders_red = np.empty((3 * n_overlap, 2), dtype=object)
borders_red.fill(None)
borders_red[::3, :] = borders_right[overlap == 1]
borders_red[1::3, :] = borders_left[overlap == 1]

borders_blue = np.empty((3 * (n_samples - n_overlap), 2), dtype=object)
borders_blue.fill(None)
borders_blue[::3, :] = borders_right[overlap == 0]
borders_blue[1::3, :] = borders_left[overlap == 0]

overlaps = np.empty((3 * n_samples), dtype=object)
overlaps.fill(None)
overlaps[::3] = overlap
overlaps[1::3] = overlap
overlaps[2::3] = overlap

idx_red = np.cumsum(overlaps)
idx_blue = np.cumsum(1 - overlaps)


# Create subplots with 2 rows and 1 column with ratio x /  y  of 10
fig = make_subplots(rows=2, cols=1, vertical_spacing=0.1, row_heights=[2, 1])

# Use a loop to plot vertical lines equation "y=c" for integer values c in [-2, -1, 0, 1, 2]
for i in range(int(np.round(xmin)), int(np.round(xmax)) + 1):
    fig.add_shape(
        type="line",
        y0=-3,
        x0=i,
        y1=3,
        x1=i,
        line=dict(
            color="black",
            width=2,
        ),
        row=1,
        col=1,
    )

color = np.where(overlaps, 1.0, 0.0)
# Plot the segment delimited by borders_left and border_right, with the color defined above


n_samples_array = np.arange(1, n_samples + 1)
pi_estimate = 2 / (np.cumsum(overlap) / n_samples_array)
t = n_samples

fig.update_layout(
    template="simple_white",
    xaxis=dict(range=[xmin, xmax], constrain="domain", showgrid=False),
    yaxis_scaleanchor="x",
    xaxis_visible=False,
    yaxis_visible=False,
)

for i in range(3, t):
    fig.add_trace(
        go.Scatter(
            x=borders_red[: idx_red[3 * i] + 1, 0],
            y=borders_red[: idx_red[3 * i] + 1, 1],
            mode="lines",
            line=dict(width=2),
            marker=dict(color="red"),
            name="Avec intersection",
            visible=False,
        ),
        row=1,
        col=1,
    )
    fig.add_trace(
        go.Scatter(
            x=borders_blue[: idx_blue[3 * i] + 1, 0],
            y=borders_blue[: idx_blue[3 * i] + 1, 1],
            mode="lines",
            line=dict(width=2),
            marker=dict(color="darkblue"),
            name="Sans intersection",
            visible=False,
        ),
        row=1,
        col=1,
    )

    fig.add_trace(
        go.Scatter(
            x=n_samples_array[:i],
            y=pi_estimate[:i],
            mode="lines",
            line=dict(width=1),
            marker=dict(color="red"),
            showlegend=False,
            visible=False,
        ),
        row=2,
        col=1,
    )

fig.add_annotation(
    dict(
        x=1.25,
        y=0.14,
        xref="paper",
        yref="paper",
        text="Estimation de pi",
        showarrow=False,
        font=dict(color="red"),
    )
)

fig.add_annotation(
    dict(x=-0.04, y=0.19, xref="paper", yref="paper", text="pi", showarrow=False)
)

# axis labels "nombre de tirages"
fig.update_xaxes(title_text="Nombre d'aiguilles tirées", row=2, col=1)

fig.update_layout(
    template="none",
    xaxis2=dict(showgrid=True, zeroline=True, zerolinewidth=1, range=[0, n_samples]),
    yaxis2=dict(showgrid=True, zeroline=True, zerolinewidth=1, range=[0, 6]),
)
# plot a dash line at y=pi
fig.add_shape(
    type="line",
    y0=np.pi,
    x0=0,
    y1=np.pi,
    x1=n_samples,
    line=dict(
        color="black",
        width=1,
        dash="dashdot",
    ),
    row=2,
    col=1,
)


fig.data[10 * 3].visible = True
fig.data[10 * 3 + 1].visible = True
fig.data[10 * 3 + 2].visible = True

# Create and add slider
steps = []
for i in range(len(fig.data) // 3):
    step = dict(
        label=str(i + 4),
        method="update",
        args=[
            {"visible": [False] * len(fig.data)},
            {
                "title": "Estimation avec "
                + str(i + 4)
                + f" aiguilles: pi = {pi_estimate[i]:.4f}"
            },
        ],  # layout attribute
    )
    step["args"][0]["visible"][3 * i] = True  # Toggle i'th trace to "visible"
    step["args"][0]["visible"][3 * i + 1] = True  # Toggle i'th trace to "visible"
    step["args"][0]["visible"][3 * i + 2] = True  # Toggle i'th trace to "visible"

    steps.append(step)

slider = dict(
    active=6,
    currentvalue={"prefix": "Nombre d'aiguilles: "},
    pad={"t": 50},
    y=-0.32,
    steps=steps,
)

fig.update_layout(sliders=[slider])
fig.show()

```

On va fournir ici le calcul de la probabilité $P$. Pour cela on aura besoin de quelques éléments décrits dans le dessin ci-dessous.

- $x$ : distance entre le centre de l'aiguille et la ligne de la trame du parquet la plus proche
- $\theta$ : angle entre l'aiguille et la ligne de la trame du parquet la plus proche
- $1$ : longueur de l'aiguille (et donc la demi longueur est $\frac{1}{2}$)
- $\frac{1}{2}\sin(\theta)$ : distance entre l'extrémité de l'aiguille et la ligne de la trame du parquet la plus proche

::: {#fig-elephants layout-ncol=2}

![Sans croisement](../srcimages/buffon.svg){width=90%}

![Avec croisement](../srcimages/buffon_bis.svg){width=90%}

Configuration sans croisement (à gauche) et avec croisement (à droite) de l'aiguille avec une ligne de la trame du parquet.
:::

Avec les éléments ci-dessus, on voit qu'il y a chevauchement si et seulement si:
$\frac{1}{2}\sin(\theta) \geq x$.

Maintenant par des arguments de symétrie on voit qu'on peut se restreindre à $\theta \in [0, \frac{\pi}{2}]$, et à $x \in [0, \frac{1}{2}]$.
Les lois de générations des variables aléatoires $X$ et $\Theta$ sont les suivantes:

- $X \sim \mathcal{U}([0, \frac{1}{2}])$, de densité $f_X(x) = 2 {1\hspace{-3.8pt} 1}_{[0, \frac{1}{2}]}(x)$
- $\Theta \sim \mathcal{U}([0, \frac{\pi}{2}])$ de densité $f_\Theta(\theta) = \frac{2}{\pi} {1\hspace{-3.8pt} 1}_{[0, \frac{\pi}{2}]}(\theta)$

De plus on suppose que $X$ et $\Theta$ sont indépendantes.

Maintenant pour calculer la probabilité $P$ on procède comme suit:
$$
\begin{align*}
P
& = \mathbb{P}\left(\frac{1}{2}\sin(\Theta) \geq X\right) \\
& = \int_{\mathbb{R}^2} {1\hspace{-3.8pt} 1}_{\{\frac{1}{2}\sin(\theta) \geq x\}} f_{\Theta}(\theta) f_X(x) d\theta dx  \quad (\text{par indépendance})\\
& = \int_{\mathbb{R}} \int_{\mathbb{R}}
{1\hspace{-3.8pt} 1}_{\{\frac{1}{2}\sin(\theta) \geq x\}} \frac{2}{\pi} {1\hspace{-3.8pt} 1}_{[0, \frac{\pi}{2}]}(\theta) \cdot 2 {1\hspace{-3.8pt} 1}_{[0, \frac{1}{2}]}(x) d\theta dx \\
& = \int_{0}^{\frac{\pi}{2}} \int_{0}^{\frac{1}{2}\sin(\theta)} \frac{4}{\pi} dx  d\theta \\
& = \frac{4}{\pi} \int_{0}^{\frac{\pi}{2}} {\frac{1}{2}\sin(\theta)}  d\theta\\  
& = \frac{2}{\pi} \Big[ -\cos(\theta)\Big]_{0}^{\frac{\pi}{2}} \\
& = \frac{2}{\pi} \enspace.
\end{align*}
$$

::: {.callout-important appearance='default' icon="false"}
##  Exercice: rendre le jeu équilibré?
En reprenant le même type de raisonnement que ci-dessus, trouver la distance entre les lattes du parquet qui rend le jeu équilibrer entre les deux joueurs introduit par Buffon (l'un pariant sur le fait que l'aiguille croise une ligne de la trame du parquet, l'autre pariant sur le fait que l'aiguille ne croise pas une ligne de la trame du parquet).
:::


## Méthode de Monte-Carlo

[John von Neumann](https://fr.wikipedia.org/wiki/John_von_Neumann)^[[John von Neumann](https://fr.wikipedia.org/wiki/John_von_Neumann):  (1903-1957) mathématicien et physicien américano-hongrois, un des pères de l'informatique.
<img src="https://upload.wikimedia.org/wikipedia/commons/d/d6/JohnvonNeumann-LosAlamos.jpg" width="65%" style="display: block; margin-right: auto; margin-left: auto;" title="Unless otherwise indicated, this information has been authored by an employee or employees of the Los Alamos National Security, LLC (LANS), operator of the Los Alamos National Laboratory under Contract No. DE-AC52-06NA25396 with the U.S. Department of Energy. The U.S. Government has rights to use, reproduce, and distribute this information. The public may copy and use this information without charge, provided that this Notice and any statement of authorship are reproduced on all copies. Neither the Government nor LANS makes any warranty, express or implied, or assumes any liability or responsibility for the use of this information." alt="Unless otherwise indicated, this information has been authored by an employee or employees of the Los Alamos National Security, LLC (LANS), operator of the Los Alamos National Laboratory under Contract No. DE-AC52-06NA25396 with the U.S. Department of Energy. The U.S. Government has rights to use, reproduce, and distribute this information. The public may copy and use this information without charge, provided that this Notice and any statement of authorship are reproduced on all copies. Neither the Government nor LANS makes any warranty, express or implied, or assumes any liability or responsibility for the use of this information."></img>]



[Nicholas Metropolis](https://fr.wikipedia.org/wiki/Nicholas_Metropolis)^[[Nicholas Metropolis](https://fr.wikipedia.org/wiki/Nicholas_Metropolis):  (1915-1999)
<img src="https://upload.wikimedia.org/wikipedia/commons/5/56/Nicholas_Metropolis_cropped.PNG" width="65%" style="display: block; margin-right: auto; margin-left: auto;" title="Nicholas Metropolis à Los Alamos National Laboratory" alt="Nicholas Metropolis à Los Alamos National Laboratory"></img>]



[Stanisław Ulam](https://fr.wikipedia.org/wiki/Stanislaw_Ulam)^[[Stanisław Ulam](https://fr.wikipedia.org/wiki/Stanislaw_Ulam):  (1909-1984)
<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/82/Stanislaw_Ulam.tif/lossy-page1-413px-Stanislaw_Ulam.tif.jpg" width="65%" style="display: block; margin-right: auto; margin-left: auto;" title="Unless otherwise indicated, this information has been authored by an employee or employees of the Los Alamos National Security, LLC (LANS), operator of the Los Alamos National Laboratory under Contract No. DE-AC52-06NA25396 with the U.S. Department of Energy. The U.S. Government has rights to use, reproduce, and distribute this information. The public may copy and use this information without charge, provided that this Notice and any statement of authorship are reproduced on all copies. Neither the Government nor LANS makes any warranty, express or implied, or assumes any liability or responsibility for the use of this information." alt="Unless otherwise indicated, this information has been authored by an employee or employees of the Los Alamos National Security, LLC (LANS), operator of the Los Alamos National Laboratory under Contract No. DE-AC52-06NA25396 with the U.S. Department of Energy. The U.S. Government has rights to use, reproduce, and distribute this information. The public may copy and use this information without charge, provided that this Notice and any statement of authorship are reproduced on all copies. Neither the Government nor LANS makes any warranty, express or implied, or assumes any liability or responsibility for the use of this information."></img>]



## Hasting Metropolis

## Culture populaire "Monty Hall game show"