---
title: "Notations et premiers pas"
subtitle: "HAX603X: Modélisation stochastique"
format:
  revealjs:
    toc: true
    template-partials:
        - toc-slide.html
    include-after-body: toc-add.html
---

# Variables aléatoires et lois

## Notations et rappels de probabilités

::: {.fragment fragment-index=1}

- Espace probabilisé: $(\Omega, {\mathcal{F}}, \mathbb{P})$
  - ensemble: $\Omega$
  - muni d'une tribu: $\mathcal{F}$
  - et d'une mesure de probabilité: $\mathbb{P}$
:::

::: {.fragment fragment-index=2}


::: {#def-va}

## Variable aléatoire, v.a.

Soit $(E, \mathcal{E})$ un espace mesurable. Une *variable aléatoire*  est une application mesurable
$$
    \begin{array}{ccccc}
        X & : & \Omega & \to     & E            \\
            &   & \omega & \mapsto & X(\omega)\,.
    \end{array}
$$
Ainsi $\{\omega \in \Omega : X(\omega) \in B\} =  X^{-1}(B) = \{X \in B\} \in \mathcal{F}, \forall B \in \mathcal{E}$
:::

:::



## Loi d'une variable aléatoire (unidimensionnelle)
::: {#def-loi}

## Loi d'une variable aléatoire

<br>

Soit $X : (\Omega, \mathcal{F}, \mathbb{P}) \to (E, \mathcal{E})$ une v.a. On appelle *loi de $X$* la mesure de probabilité sur $(E, \mathcal{E})$ définie par
$$
		\begin{array}{ccccc}
			\mathbb{P}_X & : & \mathcal{E} & \to     & [0,1]          \\
			     &   & B           & \mapsto & \mathbb{P}(X \in B) \enspace.
		\end{array}
$$

:::

<br>

:::{.callout-note}
Les propriétés de $\mathbb{P}$ assurent que $\mathbb{P}_X$ est bien une mesure de probabilité sur l'espace mesurable $(E, \mathcal{E})$
:::


# Variables usuelles


## Lois discrètes
Les variables aléatoires discrètes sont celles à valeurs dans un ensemble $E$ discret, le plus souvent $\mathbb{N}$, muni de la tribu pleine $\mathcal{F} = \mathcal{P}(E)$.

::: {#exm-bernoulli}

## Loi de Bernoulli

Soit un paramètre $p \in [0,1]$, et $E=\{0,1\}$, alors la loi de **Bernouilli** est donnée par $\mathbb{P}(X=1)=1-\mathbb{P}(X=0) = p$.

[Notation:]{.underline} $\quad$  $X \sim \mathcal{B}(p)$
:::

[Exemple physique]{.underline}: ![](images/coin-toss-4-svgrepo-com.svg){width=50} loi d'un tirage de pile ou face, de biais $p$

::: {#exm-binomiale}

## Loi binomiale
Soient $p \in [0,1]$ (biais) et $n \in \mathbb{N}^*$ (nombre de tirages) alors la loi **Binomiale** est donnée par $\mathbb{P}(X=k) = \binom{n}{k} p^k (1-p)^{n-k}$, pour $k \in E=\{0,\dots,n\}$.

[Notation:]{.underline} $\quad$ $X \sim \mathcal{B}(n,p)$

:::

[Exemple physique]{.underline}: ![](images/coin-toss-4-svgrepo-com-blue.svg){width=50} ![](images/coin-toss-4-svgrepo-com-red.svg){width=50} ![](images/coin-toss-4-svgrepo-com-red.svg){width=50} ![](images/coin-toss-4-svgrepo-com-blue.svg){width=50} ![](images/coin-toss-4-svgrepo-com-red.svg){width=50}
loi du nombre de succès obtenus lors de $n$ répétitions indépendantes d'une expérience aléatoire de Bernoulli de paramètre $p$

## Lois discrètes (II)

::: {#exm-géométrique}

## Loi géométrique
Soient $p \in [0,1]$ (biais), alors la loi **géométrique** est donnée par  $\mathbb{P}(X=k) = p (1-p)^{k-1}$, pour $k \in E=\mathbb{N}^*$.

[Notation:]{.underline} $\quad$ $X \sim \mathcal{G}(p)$
:::

:::{.fragment .fragment-index-2}
[Exemple physique]{.underline}: ![](images/coin-toss-4-svgrepo-com-red.svg){.fragment width=50} ![](images/coin-toss-4-svgrepo-com-red.svg){.fragment width=50} ![](images/coin-toss-4-svgrepo-com-red.svg){.fragment width=50} ![](images/coin-toss-4-svgrepo-com-red.svg){.fragment width=50} ![](images/coin-toss-4-svgrepo-com-blue.svg){.fragment width=50}

:::{.fragment .fragment-index-3}
loi du nombre tirage nécessaire avant d'obtenir un succès obtenus en répétant indépendamment des expériences aléatoires de Bernoulli de paramètre $p$
:::

:::

:::{.fragment .fragment-index-4}

::: {#exm-Poisson}

## Loi de Poisson

Pour $\lambda>0$, la loi de **Poisson** de paramètre $\lambda$ est définie par $\mathbb{P}(X=k) = e^{-\lambda} \lambda^k / k!$, pour tout $k \in E=\mathbb{N}$.

[Notation:]{.underline} $\quad$ $X \sim \mathcal{P}(\lambda)$
:::

[Exemple physique]{.underline}: comportement du nombre d'événements se produisant avec une fréquence connue, et indépendamment du temps écoulé depuis l'événement précédent (*e.g.,* nombre de clients dans une file d'attente, nombre de mutations dans un gène, etc.)

:::


## Lois continues
Loi d'une v.a. admettant une fonction de densité, c'est-à-dire qu'il existe une fonction mesurable $f : \mathbb{R} \to [0, \infty[$ d'intégrale $1$, telle que pour tout $A \in \mathcal{B}(\mathbb{R})$ 
$$
    \mathbb{P}(X \in A) = \int_A f(x) dx \enspace.
$$

:::{.callout-note}
Les propriétés de l'intégrale de Lebesgue assurent que cette formule définit bien une loi de probabilité.
:::


- **Espérance**: $\mathbb{E}(X) = \displaystyle\int_{\mathbb{R}} x f(x) dx$
- **Variance**: $\mathbb{V}(X) = \mathbb{E}\left((X-\mathbb{E}(X)\right)^2 = \displaystyle\int_{\mathbb{R}} (x-\mathbb{E}(X))^2 f(x) dx$


## Lois continues usuelles

::: {#exm-uniforme}

## Loi uniforme
La loi **uniforme** sur un ensemble $B \in \mathcal{B}(\mathbb{R})$, s'obtient avec la densité définie par
$$
f(x) = {1\hspace{-3.8pt} 1}_B(x) / \lambda (B) \enspace,
$$
où $\lambda (B)>0$ représente la mesure de Lebesgue de l'ensemble $B$.
:::

Cas particulier: pour la loi uniforme sur $[0,1]$, on obtient la fonction suivante:
$$
f(x) = {1\hspace{-3.8pt} 1}_{[0,1]}(x)\enspace.
$$
[Notation:]{.underline} $\quad$ $X \sim \mathcal{U}([0,1])$

:::{.callout-note}
Une telle loi est caractérisée ainsi : tous les intervalles de même longueur inclus dans le support de la loi ont la même probabilité.
:::


## Lois continues usuelles (II)

:::{.fragment .fragment-index-1}

::: {#exm-exponentielle}

## Loi exponentielle
La loi **exponentielle** de paramètre $\gamma > 0$ est obtenue avec la densité
donnée par
$$
f(x) = \gamma e^{-\gamma x} {1\hspace{-3.8pt} 1}_{\mathbb{R}_+}(x)\enspace.
$$
[Notation:]{.underline} $\quad X \sim \mathcal{Exp}(\gamma)$
:::

:::


:::{.fragment .fragment-index-1}

::: {#prp-tot}
## Absence de mémoire

La loi exponentielle modélise la durée de vie d'un phénomène sans mémoire (ou sans vieillissement), c'est-à-dire que pour tout $s,t>0$, on a
$$
\mathbb{P}(X>t+s | X>t)=\mathbb{P}(X>s) \enspace.
$$
:::

Remarque: c'est en fait la seule loi continue à vérifier cette propriété
(voir [ici](https://www.bibmath.net/dico/index.php?action=affiche&quoi=./s/sansmemoire.html) pour une formulation précise de ce résultat)
:::


## Lois continues usuelles (III)


::: {#exm-gaussienne}

## Loi normale/gaussienne univariée
Pour des paramètres $\mu \in \mathbb{R}$ (espérance) et $\sigma^2 > 0$ (variance), la loi *normale* associée correspond à la fonction de densité :
$$
f(x) = \frac{1}{\sqrt{2 \pi \sigma^2}}e^{-\frac{1}{2 \sigma^2}(x-\mu)^2} \enspace
$$
[Notation:]{.underline} $X \sim \mathcal{N}(\mu,\sigma^2)$,
:::

On nomme loi **normale centrée réduite** le cas canonique: $\mu = 0, \sigma^2 = 1$

Si $X\sim \mathcal{N}(\mu,\sigma^2)$, alors l'espérance et la variance de $X$  valent $\mathbb{E}(X) = \mu$ et $\mathbb{V}(X) = \sigma^2$

<br>

:::{.callout-note}
Les lois normales sont omniprésente grâce au théorème central limite
:::

# Fonction de répartition et quantiles

## Enjeu de la fonction de répartition

<br>

[Enjeux]{.underline}: caractériser la loi d'une v.a. en ne considérant que l'espace d'arrivée $(E, \mathcal{E})$

<br>

:::{.fragment .fragment-index-2}
[Outils]{.underline}:

:::{.incremental}
- la fonction de répartition (v.a. réelles),
- la fonction caractéristique (v.a. dans $\mathbb{R}^d$), en gros la transformée de Fourier de la loi!
- la fonction génératrice des moments (v.a. discrètes)
- etc.
:::

:::


## Fonction de répartition

::: {#def-cdf}

##  Fonction de répartition :gb:: *cumulative distribution function*

<br>

Soit $X$ une variable aléatoire sur $(\mathbb{R}, \mathcal{B}(\mathbb{R}))$.
La fonction de répartition de $X$ est la fonction $F_X$ définie sur $\mathbb{R}$ par
$$
\begin{align*}
     F_X(x) & = \mathbb{P}(X \leq x)\\
     & \class{fragment}{{} = \mathbb{P}(X \in ]-\infty, x])}
\end{align*}
$$
:::


## Propriété élémentaire de la fonction de répartition


::: {#prp-toto}

## Propriétés élémentaires
Soit $X$ une v.a. de fonction de répartition $F_X$.

:::{.incremental}
1. $F_X$ est une fonction croissante, de limite $0$ en $-\infty$ et de limite $1$ en $+\infty$.
2. $F_X$ est continue à droite en tout point.
3. $\forall x \in \mathbb{R}$, on a $\mathbb{P}(X=x) = F_X(x) - \lim_{\epsilon \to 0+}F_X(x- \epsilon)$.
4. Si $X$ a pour densité $f$, alors $F_X$ est dérivable $\lambda$-presque partout de dérivée $f$.
:::

:::


:::{.fragment .fragment-index-2}
[Démonstration]{.underline}: voir par exemple [@Barbe_Ledoux06]
:::

:::{.fragment .fragment-index-3}

:::{.callout-note}
- Prop. 1. et 2. : $F_X$ est càdlàg (continue à droite, limite à gauche).

- Prop 3. (cas discret): les valeurs prises par $X$ correspondent aux discontinuités de $F_X$, les probabilités, à la hauteur du saut.

- Prop. 4. (cas continu): le lien entre la fonction de répartition et densité.

:::
:::


## Fonction de répartition et caractérisation de la loi
::: {#thm-fdr_carac}

## Caractérisation de la loi d'une variable aléatoire réelle
<br>

La fonction de répartition d'une variable aléatoire caractérise sa loi : deux variables aléatoires ont même loi si et seulement si elles ont même fonction de répartition.
:::

:::{.incremental}
- [Démonstration]{.underline}: voir [Wikipedia](https://fr.wikipedia.org/wiki/Fonction_de_r%C3%A9partition#Caract%C3%A9risation_de_la_loi_par_la_fonction_de_r%C3%A9partition) <br><br>
- [Rappel]{.underline}: la tribu des boréliens est engendrée par la famille d'ensembles $\{]-\infty,x], x \in \mathbb{R}\}$ <br><br>
- [Interprétation]{.underline}: connaître $\mathbb{P}_X$ sur cette famille d'ensembles $\implies$ la connaître partout
:::


## Fonction de répartition: cas discret

<br>
Dans le cas d'une loi discrète, la fonction de répartition est une fonction en escalier, constante par morceaux, et croissante.
<br>
<br>
<br>

::: {#exm-cdf-discret}

## Cas discret

Soit $(x_i)_{i \in I}$ une suite ordonnée de réels, avec $I \subset \mathbb{N}$.
Si $X$ est une variable aléatoire discrète prenant les valeurs $(x_i)_{i \in I}$ et de loi $(p_i = \mathbb{P}(X=x_i))_{i \in I}$, alors
$$
\forall x \in \mathbb{R}, \quad F_X(x) = \sum_{i \in I} p_i {1\hspace{-3.8pt} 1}_{[x_i, \infty[}(x) \enspace.
$$

:::


## Fonction de répartition: cas continu


<br>

<br>

<br>

::: {#exm-cdf-discret}

## Cas continu
Si $X$ est une variable aléatoire de densité $f$, alors
$$
\forall x \in \mathbb{R}, \quad F_X(x) = \int_{-\infty}^x f(t) \, \mathrm dt \enspace.
$$
:::

[Vocabulaire]{.underline}: densité  (:gb:: *probability density function*)


## Loi normale
Cas de la loi normale centrée réduite, $X \sim \mathcal{N}(0,1)$: $F_X=\Phi$, avec $\Phi$ définie par
$$
F_X(x) \triangleq \Phi(x) = \dfrac{1}{\sqrt{2\pi}} \int_{-\infty}^x e^{-\frac{t^2}{2}}\, \mathrm d t\enspace,
$$

:::{.callout-note}
L'intégrale ne peut être obtenue à partir d'une formule fermée^[[Wikipedia: Théorème de Liouville](https://fr.wikipedia.org/wiki/Th%C3%A9or%C3%A8me_de_Liouville_(alg%C3%A8bre_diff%C3%A9rentielle))]. Autrefois, les valeurs de $\Phi(x)$ étaient reportées dans des tables^[[Wikipedia: loi normale](https://fr.wikipedia.org/wiki/Loi_normale#Tables_num%C3%A9riques_et_calculs)].
:::


:::{.fragment .fragment-index-2}
- Transformation affine: si $X \sim \mathcal{N}(\mu, \sigma^2)$ --- i.e., $X=\mu + \sigma Y$, avec $Y\sim \mathcal{N}(0,1)$ --- alors
$$
F_X(x)=\Phi\left(\frac{x-\mu}{\sigma}\right)
$$
:::



## Fonction quantile, inverse généralisée 

::: {#def-quantile}

##  Quantile/ inverse généralisée :gb:: *quantile distribution function*

<br>

Soit $X$ une variable aléatoire sur $(\mathbb{R}, \mathcal{B}(\mathbb{R}))$
et $F_X$ sa fonction de répartion.
La **fonction quantile** associée
$F_X^\leftarrow: ]0,1[ \rightarrow \mathbb{R}$ est définie par
$$
  F_X^\leftarrow(p) = \inf\{ x \in \mathbb{R} : F_X(x)\geq p\} \enspace.
$$
:::


- $F_X$ est bijective $\implies$ $F_X^{-1}=F_X^\leftarrow$

[Vocabulaire]{.underline}:

- la fonction quantile s'appelle aussi **inverse de Levy** ou **inverse généralisée** (à gauche)
- **médiane** : $F_X^\leftarrow(1/2)$
- **premier/troisième quartile**: $F_X^\leftarrow(1/4), F_X^\leftarrow(3/4)$
- déciles : $F_X^\leftarrow(k/10)$ pour $k=1,\dots, 9$




## Quantiles: cas continu

::::{.columns}

:::{.column width="38%"}

```{ojs}
//| echo: false
// sometimes the version fails..: use that one:
Plotly = require("https://cdn.plot.ly/plotly-2.34.0.min.js")
// Plotly = require('plotly.js-dist');

dists = require('https://cdn.jsdelivr.net/gh/stdlib-js/stats-base-dists@umd/browser.js');
// see source here: https://github.com/stdlib-js/stats-base-dists/tree/umd
// continuous case
jstatPDFs = () => {
  const distributions = Object.keys(dists);
  // Get in continuousDistributions the distributions whose pdf, cdf and quantile are defined
    const continuousDistributions = distributions.filter(name => dists[name].pdf && dists[name].cdf && dists[name].quantile);
  return continuousDistributions
};
output = jstatPDFs();

excludedPDFs = ["hypergeometric"];
pdfNames_unsorted = output.filter(name => !excludedPDFs.includes(name));
pdfNames=pdfNames_unsorted.toSorted();
viewof inputs = Inputs.form([
      Inputs.range([-10, 10], {value: 0.1, step: 0.001, label: tex`\mu`, width: 500}),
      Inputs.range([0.01, 5], {value: 1.01, step: 0.001, label: tex`\sigma`, width: 500}),
      Inputs.range([0.001, 0.999], {value: 0.75, step: 0.001, label:tex`\alpha`, width: 500}),
    ]);


viewof distrib_name = Inputs.select(pdfNames, {value: "normal", label: "Loi", width: 500});

```

:::

:::{.column width="60%"}


```{ojs}

{
  const x = d3.range(-10, 10, 0.01);
  const pdf = x.map(x => dists[distrib_name].pdf(x, mu, sigma));
  const cdf = x.map(x => dists[distrib_name].cdf(x, mu, sigma));
  const inv = x.map(x => dists[distrib_name].quantile(x, mu, sigma));
  const quantile = dists[distrib_name].quantile(alpha, mu, sigma);
  const filteredX = x.filter(coord => coord < quantile);
  const filteredPdf = pdf.filter((_, i) => x[i] <= quantile);
  const filteredCdf = cdf.filter(coord => coord <= quantile);


{
var trace1 = {
      type: "scatter",
      name: 'Quantile',
      x: cdf,
      y: x,
      line: {color: 'black'},
      xaxis: 'x1',
      yaxis: 'y3',


};

var trace12 = {
        x : [alpha, alpha],
        y : [x[0], quantile],
        mode: 'lines',
        line: {
            dash: 'dash',
            width: 1,
            color: ' #428BCA',
            marks: {
                size: 0,
                color: ' #428BCA',
            }

          },
      xaxis: 'x1',
      yaxis: 'y3',


};



var trace13 = {
    x: [0, alpha],
    y: [quantile, quantile],
    mode: 'scatter',
    line: {
        dash: 'dash',
        width: 1,
        color: ' #428BCA',
        marks: {
            size: 0,
        }
    },
    xaxis: 'x1',
    yaxis: 'y3'
}


var trace2 = {
x: cdf,
y: cdf,
type: 'scatter',
name: 'identity',
line: {color: 'black'},
xaxis: 'x1',
yaxis: 'y2'

};


var trace21 = {
        x : [alpha, 1],
        y : [alpha, alpha],
        mode: 'lines',
        line: {
            dash: 'dash',
            width: 1,
            color: ' #428BCA',
            marks: {
                size: 0,
                color: ' #428BCA',
            }

          },
      xaxis: 'x1',
      yaxis: 'y2'
}

var trace22 = {
        x : [alpha, alpha],
        y : [alpha, 1],
        mode: 'lines',
        line: {
            dash: 'dash',
            width: 1,
            color: ' #428BCA',
            marks: {
                size: 0,
                color: ' #428BCA',
            }

          },
      xaxis: 'x1',
      yaxis: 'y2'
}



var trace23 = {
    x: [alpha],
    y: [alpha],
    mode: 'scatter',
    line: {
        dash: 'dash',
        width: 1,
        color: ' #428BCA',
        marks: {
            size: 0,
        }
    },
    xaxis: 'x1',
    yaxis: 'y2'
}


var trace31 = {
      type: "scatter",
      mode: "lines",
      name: 'PDF2',
      x: x,
      y: cdf,
      line: {color: 'black'},
      xaxis: 'x2',
      yaxis: 'y2',
};

var trace32 = {
        x: filteredX,
        y: filteredX.map(x => alpha),
        mode: 'lines',
        line: {
            dash: 'dash',
            width: 1,
            color: ' #428BCA',
            marks: {
                size: 0,
                color: ' #428BCA',
            }
          },
      xaxis: 'x2',
      yaxis: 'y2'
}

var trace33 = {
        x : [quantile, quantile],
        y : [0, alpha],
        mode: 'lines',
        line: {
            dash: 'dash',
            width: 1,
            color: ' #428BCA',
            marks: {
                size: 0,
                color: ' #428BCA',
            }
          },

      xaxis: 'x2',
      yaxis: 'y2'
}

var trace34 = {
    x: [quantile],
    y: [alpha],
    mode: 'scatter',
    line: {
        dash: 'dash',
        width: 1,
        color: ' #428BCA',
        marks: {
            size: 0,
        }
    },
    xaxis: 'x2',
    yaxis: 'y2'
}


var trace41 = {

  type: "scatter",
  name: 'Quantile2',
  fill: 'tozeroy',
  x: filteredX,
  y: filteredPdf,
  opacity: 0.9,
  line: {color: ' #428BCA'},
  xaxis: 'x2',
  yaxis: 'y1'

};


var trace42 = {

  type: "scatter",
  mode: "lines",
  name: 'PDF2',
  x: x,
  y: pdf,
  line: {color: 'black'},
  xaxis: 'x2',
  yaxis: 'y1'

};

var data = [
  trace1,
  trace12, trace13,
  trace2, trace21, trace22, trace23,
  trace31, trace32, trace33, trace34,
  trace41, trace42];


var layout = {

  title: 'Distribution et quantile',
  xaxis: {
    domain: [0, 0.32],
    anchor: 'y1'
  },
  yaxis: {
    domain: [0, 0.24],
    anchor: 'x1'

  },
  xaxis2: {
    domain: [0.35, 1],
    anchor: 'y'
  },

  yaxis2: {
    domain: [0.26, 0.49],
    anchor: 'x1'
  },

  yaxis3: {
    domain: [0.5, 1],
    anchor: 'x1'
  },

// legend offset
  showlegend: false,
  height: 680,
  annotations: [

    {
      x: 1/4,
      y: quantile - (x[0]-x.slice(-1))/20,
      xref: 'x1',
      yref: 'y3',
      text: 'q= ' + quantile.toFixed(2),
      font: {
        size: 12,
        color: '#428BCA',

      },
      showarrow: false,
      arrowhead: 0,
      ax: 25,
      ay: -10,

    },
    {
      x: 1/4,
      y: alpha,
      xref: 'x1',
      yref: 'y2',
      text: 'alpha= ' + alpha.toFixed(2),
      font: {
        size: 12,
        color: '#428BCA',

      },
      showarrow: false,
      arrowhead: 0,
      ax: 25,
      ay: -10,

    },
    {
        text: "Fonction quantile",
      font: {
      size: 15,
      color: 'black',
    },
    showarrow: false,
    align: 'center',
    x: -0.01,
    y: 1.05,
    xref: 'paper',
    yref: 'paper',
    },
    {
      text: "Fonction de répartition",
      font: {
      size: 15,
      color: 'black',
            },
    showarrow: false,
    align: 'center',
    x: 0.65,
    y: 0.52,
    xref: 'paper',
    yref: 'paper',
    },
    {
      text: "Fonction de densité",
      font: {
      size: 15,
      color: 'black',
            },
    showarrow: false,
    align: 'center',
    x: 0.65,
    y: 0.225,
    xref: 'paper',
    yref: 'paper',
    },
  ]

};
// XXX: TODO: put the xticks labels on the middle plot for x and on the right plot for y
    var config = {responsive: true}
    const div = DOM.element('div');
    Plotly.newPlot(div, data, layout, config);
    return div;
  }

}

mu = inputs[0];
sigma = inputs[1];
alpha = inputs[2]
```
:::


::::
<br>

[Note]{.underline}: voir aussi [Notations et rappels](https://josephsalmon.github.io/HAX603X/Courses/notations.html#)



## Quantiles: cas discret


::::{.columns}

:::{.column width="38%"}

```{ojs}
//| echo: false
discretePDFs = () => {
  const distributions = Object.keys(dists);
  // Get in continuousDistributions the distributions whose pdf, cdf and quantile are defined
    const continuousDistributions = distributions.filter(name => dists[name].pmf && dists[name].cdf && dists[name].quantile);
  return continuousDistributions
};
output_discr = discretePDFs();

pmfNames_unsorted = output_discr.filter(name => !excludedPDFs.includes(name));
pmfNames=pmfNames_unsorted.toSorted();
viewof inputs_disc = Inputs.form([
      Inputs.range([-10, 20], {value: 0.1, step: 0.001, label: tex`\mu `, width: 500}),
      Inputs.range([0.01, 5], {value: 1.01, step: 0.001, label: tex`\sigma `, width: 500}),
      Inputs.range([0.001, 0.999], {value: 0.75, step: 0.001, label: tex`\alpha`, width: 500}),
    ]);

viewof distrib_name_discr = Inputs.select(pmfNames, {value: "normal", label: "Loi", width: 500});
```

:::

:::{.column width="60%"}

```{ojs}

{
  const z = d3.range(-2, 20, 0.01);


  const pmf = z.map(z => dists[distrib_name_discr].pmf(z, mu_disc, sigma_disc));
  const cdf = z.map(z => dists[distrib_name_discr].cdf(z, mu_disc, sigma_disc));
  const inv = z.map(z => dists[distrib_name_discr].quantile(z, mu_disc, sigma_disc));
  const quantile = dists[distrib_name_discr].quantile(alpha_disc, mu_disc, sigma_disc);
  
  const filteredX = z.filter(coord => coord <= quantile);
  const filteredPmf = pmf.filter((_, i) => z[i] <= quantile);
  const filteredCdf = cdf.filter(coord => coord <= quantile);


{
var trace1 = {
      type: "scatter",
      name: 'Quantile',
      x: cdf,
      y: z,
      line: {color: 'black'},
      xaxis: 'x1',
      yaxis: 'y3',


};

var trace12 = {
        x : [alpha_disc, alpha_disc],
        y : [z[0], quantile],
        mode: 'lines',
        line: {
            dash: 'dash',
            width: 1,
            color: ' #428BCA',
            marks: {
                size: 0,
                color: ' #428BCA',
            }

          },
      xaxis: 'x1',
      yaxis: 'y3',


};



var trace13 = {
    x: [0, alpha_disc],
    y: [quantile, quantile],
    mode: 'scatter',
    line: {
        dash: 'dash',
        width: 1,
        color: ' #428BCA',
        marks: {
            size: 0,
        }
    },
    xaxis: 'x1',
    yaxis: 'y3'
}


var trace2 = {
x: cdf,
y: cdf,
type: 'scatter',
name: 'identity',
line: {color: 'black'},
xaxis: 'x1',
yaxis: 'y2'

};


var trace21 = {
        x : [alpha_disc, 1],
        y : [alpha_disc, alpha_disc],
        mode: 'lines',
        line: {
            dash: 'dash',
            width: 1,
            color: ' #428BCA',
            marks: {
                size: 0,
                color: ' #428BCA',
            }

          },
      xaxis: 'x1',
      yaxis: 'y2'
}

var trace22 = {
        x : [alpha_disc, alpha_disc],
        y : [alpha_disc, 1],
        mode: 'lines',
        line: {
            dash: 'dash',
            width: 1,
            color: ' #428BCA',
            marks: {
                size: 0,
                color: ' #428BCA',
            }

          },
      xaxis: 'x1',
      yaxis: 'y2'
}

var trace23 = {
    x: [alpha_disc],
    y: [alpha_disc],
    mode: 'scatter',
    line: {
        dash: 'dash',
        width: 1,
        color: ' #428BCA',
        marks: {
            size: 0,
        }
    },
    xaxis: 'x1',
    yaxis: 'y2'
}


var trace31 = {
      type: "scatter",
      mode: "lines",
      name: 'PDF2',
      x: z,
      y: cdf,
      line: {color: 'black'},
      xaxis: 'x2',
      yaxis: 'y2',
};

var trace32 = {
        x: filteredX,
        y: filteredX.map(z => alpha_disc),
        mode: 'lines',
        line: {
            dash: 'dash',
            width: 1,
            color: ' #428BCA',
            marks: {
                size: 0,
                color: ' #428BCA',
            }
          },
      xaxis: 'x2',
      yaxis: 'y2'
}

var trace33 = {
        x : [quantile, quantile],
        y : [0, alpha_disc],
        mode: 'lines',
        line: {
            dash: 'dash',
            width: 1,
            color: ' #428BCA',
            marks: {
                size: 0,
                color: ' #428BCA',
            }
          },

      xaxis: 'x2',
      yaxis: 'y2'
}

var trace34 = {
    x: [quantile],
    y: [alpha_disc],
    mode: 'scatter',
    line: {
        dash: 'dash',
        width: 1,
        color: ' #428BCA',
        marks: {
            size: 0,
        }
    },
    xaxis: 'x2',
    yaxis: 'y2'
}


var trace41 = {

  type: "scatter",
  name: 'Quantile2',
  fill: 'tozeroy',
  x : filteredX,
  y : filteredPmf,
  opacity: 0.9,
  line: {color: ' #428BCA'},
  xaxis: 'x2',
  yaxis: 'y1'

};


var trace42 = {

  type: "scatter",
  mode: "lines",
  name: 'PDF2',
  x: z,
  y: pmf,
  line: {color: 'black'},
  xaxis: 'x2',
  yaxis: 'y1'

};

var data = [
  trace1,
  trace12, trace13,
  trace2, trace21, trace22, trace23,
  trace31, trace32, trace33, trace34,
  trace41, trace42];


var layout = {

  title: 'Distribution et quantile',
  xaxis: {
    domain: [0, 0.32],
    anchor: 'y1'
  },
  yaxis: {
    domain: [0, 0.24],
    anchor: 'x1'

  },
  xaxis2: {
    domain: [0.35, 1],
    anchor: 'y'
  },

  yaxis2: {
    domain: [0.26, 0.49],
    anchor: 'x1'
  },



  yaxis3: {
    domain: [0.5, 1],
    anchor: 'x1'

  },

  showlegend: false,
  height: 680,


  annotations: [

    {
      x: 1/4,
      y: quantile - (z[0]-z.slice(-1))/20,
      xref: 'x1',
      yref: 'y3',
      text: 'q=' + quantile.toFixed(2),
      font: {
        size: 12,
        color: '#428BCA',

      },
      showarrow: false,
      arrowhead: 0,
      ax: 25,
      ay: -10,

    },
    {
      x: 1/4,
      y: alpha_disc,
      xref: 'x1',
      yref: 'y2',
      text: 'alpha=' + alpha_disc.toFixed(2),
      font: {
        size: 12,
        color: '#428BCA',

      },
      showarrow: false,
      arrowhead: 0,
      ax: 25,
      ay: -10,

    },
    {
        text: "Fonction quantile",
      font: {
      size: 15,
      color: 'black',
    },
    showarrow: false,
    align: 'center',
    x: -0.01,
    y: 1.05,
    xref: 'paper',
    yref: 'paper',
    },
    {
      text: "Fonction de répartition",
      font: {
      size: 15,
      color: 'black',
            },
    showarrow: false,
    align: 'center',
    x: 0.65,
    y: 0.52,
    xref: 'paper',
    yref: 'paper',
    },
    {
      text: "Fonction de densité",
      font: {
      size: 15,
      color: 'black',
            },
    showarrow: false,
    align: 'center',
    x: 0.65,
    y: 0.225,
    xref: 'paper',
    yref: 'paper',
    },
  ]

};
// XXX: TODO: put the xticks labels on the middle plot for x and on the right plot for y

    var config = {responsive: true}
    const div = DOM.element('div');
    Plotly.newPlot(div, data, layout, config);
    return div;
  }

}

mu_disc = inputs_disc[0];
sigma_disc = inputs_disc[1];
alpha_disc = inputs_disc[2];
```

:::
::::

<br>

[Note]{.underline}: voir aussi [Notations et rappels](https://josephsalmon.github.io/HAX603X/Courses/notations.html#)


## Bibliographie

::: {#refs}
:::