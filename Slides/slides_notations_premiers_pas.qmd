---
title: "HAX603X: Modélisation stochastique"
subtitle: "Notation et premiers pas"
format:
  revealjs:
    toc: true
    template-partials:
        - toc-slide.html
    include-after-body: toc-add.html
---


## Notation et rappels de probabilités

- Espace probabilisé: $(\Omega, {\mathcal{F}}, \mathbb{P})$
  - composé d'un ensemble: $\Omega$
  - d'une tribu: $\mathcal{F}$
  - d'une mesure de probabilité: $\mathbb{P}$

::: {#def-va }

## Variable aléatoire, v.a.

Soit $(E, \mathcal{E})$ un espace mesurable. Une *variable aléatoire*  est une application mesurable
$$
    \begin{array}{ccccc}
        X & : & \Omega & \to     & E            \\
            &   & \omega & \mapsto & X(\omega)\,.
    \end{array}
$$
Ainsi $\{\omega \in \Omega : X(\omega) \in B\} =  X^{-1}(B) = \{X \in B\} \in \mathcal{F}, \forall B \in \mathcal{E}$
:::

## Quantiles: cas continu

::::{.columns}

:::{.column width="38%"}

```{ojs}
//| echo: false
// Plotly = require("https://cdn.plot.ly/plotly-latest.min.js")
Plotly = require('plotly.js-dist');
dists = require( 'https://cdn.jsdelivr.net/gh/stdlib-js/stats-base-dists@umd/browser.js' );
// see source here: https://github.com/stdlib-js/stats-base-dists/tree/umd
// continuous case
jstatPDFs = () => {
  const distributions = Object.keys(dists);
  // Get in continuousDistributions the distributions whose pdf, cdf and quantile are defined
    const continuousDistributions = distributions.filter(name => dists[name].pdf && dists[name].cdf && dists[name].quantile);
  return continuousDistributions
};
output = jstatPDFs();

excludedPDFs = [];
pdfNames_unsorted = output.filter(name => !excludedPDFs.includes(name));
pdfNames=pdfNames_unsorted.toSorted();
viewof inputs = Inputs.form([
      Inputs.range([-10, 10], {value: 0.1, step: 0.001, label: tex`\mu`, width: 500}),
      Inputs.range([0.01, 5], {value: 1.01, step: 0.001, label: tex`\sigma`, width: 500}),
      Inputs.range([0.001, 0.999], {value: 0.75, step: 0.001, label:tex`\alpha`, width: 500}),
    ]);


viewof distrib_name = Inputs.select(pdfNames, {value: "normal", label: "Loi", width: 500});

```

:::

:::{.column width="60%"}


```{ojs}

{
  const x = d3.range(-5, 5, 0.01);
  const pdf = x.map(x => dists[distrib_name].pdf(x, mu, sigma));
  const cdf = x.map(x => dists[distrib_name].cdf(x, mu, sigma));
  const inv = x.map(x => dists[distrib_name].quantile(x, mu, sigma));
  const quantile = dists[distrib_name].quantile(alpha, mu, sigma);
  const filteredX = x.filter(coord => coord <= quantile);
  const filteredPdf = pdf.filter((_, i) => x[i] <= quantile);
  const filteredCdf = cdf.filter(coord => coord <= quantile);


{
var trace1 = {
      type: "scatter",
      name: 'Quantile',
      x: cdf,
      y: x,
      line: {color: 'black'},
      xaxis: 'x1',
      yaxis: 'y3',


};

var trace12 = {
        x : [alpha, alpha],
        y : [x[0], quantile],
        mode: 'lines',
        line: {
            dash: 'dash',
            width: 1,
            color: ' #428BCA',
            marks: {
                size: 0,
                color: ' #428BCA',
            }

          },
      xaxis: 'x1',
      yaxis: 'y3',


};



var trace13 = {
    x: [0, alpha],
    y: [quantile, quantile],
    mode: 'scatter',
    line: {
        dash: 'dash',
        width: 1,
        color: ' #428BCA',
        marks: {
            size: 0,
        }
    },
    xaxis: 'x1',
    yaxis: 'y3'
}


var trace2 = {
x: cdf,
y: cdf,
type: 'scatter',
name: 'identity',
line: {color: 'black'},
xaxis: 'x1',
yaxis: 'y2'

};


var trace21 = {
        x : [alpha, 1],
        y : [alpha, alpha],
        mode: 'lines',
        line: {
            dash: 'dash',
            width: 1,
            color: ' #428BCA',
            marks: {
                size: 0,
                color: ' #428BCA',
            }

          },
      xaxis: 'x1',
      yaxis: 'y2'
}

var trace22 = {
        x : [alpha, alpha],
        y : [alpha, 1],
        mode: 'lines',
        line: {
            dash: 'dash',
            width: 1,
            color: ' #428BCA',
            marks: {
                size: 0,
                color: ' #428BCA',
            }

          },
      xaxis: 'x1',
      yaxis: 'y2'
}



var trace23 = {
    x: [alpha],
    y: [alpha],
    mode: 'scatter',
    line: {
        dash: 'dash',
        width: 1,
        color: ' #428BCA',
        marks: {
            size: 0,
        }
    },
    xaxis: 'x1',
    yaxis: 'y2'
}


var trace31 = {
      type: "scatter",
      mode: "lines",
      name: 'PDF2',
      x: x,
      y: cdf,
      line: {color: 'black'},
      xaxis: 'x2',
      yaxis: 'y2',
};

var trace32 = {
        x: filteredX,
        y: filteredX.map(x => alpha),
        mode: 'lines',
        line: {
            dash: 'dash',
            width: 1,
            color: ' #428BCA',
            marks: {
                size: 0,
                color: ' #428BCA',
            }
          },
      xaxis: 'x2',
      yaxis: 'y2'
}

var trace33 = {
        x : [quantile, quantile],
        y : [0, alpha],
        mode: 'lines',
        line: {
            dash: 'dash',
            width: 1,
            color: ' #428BCA',
            marks: {
                size: 0,
                color: ' #428BCA',
            }
          },

      xaxis: 'x2',
      yaxis: 'y2'
}

var trace34 = {
    x: [quantile],
    y: [alpha],
    mode: 'scatter',
    line: {
        dash: 'dash',
        width: 1,
        color: ' #428BCA',
        marks: {
            size: 0,
        }
    },
    xaxis: 'x2',
    yaxis: 'y2'
}


var trace41 = {

  type: "scatter",
  name: 'Quantile2',
  fill: 'tozeroy',
  x: filteredX,
  y: filteredPdf,
  opacity: 0.9,
  line: {color: ' #428BCA'},
  xaxis: 'x2',
  yaxis: 'y1'

};


var trace42 = {

  type: "scatter",
  mode: "lines",
  name: 'PDF2',
  x: x,
  y: pdf,
  line: {color: 'black'},
  xaxis: 'x2',
  yaxis: 'y1'

};

var data = [
  trace1,
  trace12, trace13,
  trace2, trace21, trace22, trace23,
  trace31, trace32, trace33, trace34,
  trace41, trace42];


var layout = {

  title: 'Distribution et quantile',
  xaxis: {
    domain: [0, 0.32],
    anchor: 'y1'
  },
  yaxis: {
    domain: [0, 0.24],
    anchor: 'x1'

  },
  xaxis2: {
    domain: [0.35, 1],
    anchor: 'y'
  },

  yaxis2: {
    domain: [0.26, 0.49],
    anchor: 'x1'
  },

  yaxis3: {
    domain: [0.5, 1],
    anchor: 'x1'
  },

// legend offset
  showlegend: false,
  height: 680,
  annotations: [

    {
      x: 1/4,
      y: quantile - (x[0]-x.slice(-1))/20,
      xref: 'x1',
      yref: 'y3',
      text: 'q= ' + quantile.toFixed(2),
      font: {
        size: 12,
        color: '#428BCA',

      },
      showarrow: false,
      arrowhead: 0,
      ax: 25,
      ay: -10,

    },
    {
      x: 1/4,
      y: alpha,
      xref: 'x1',
      yref: 'y2',
      text: 'alpha= ' + alpha.toFixed(2),
      font: {
        size: 12,
        color: '#428BCA',

      },
      showarrow: false,
      arrowhead: 0,
      ax: 25,
      ay: -10,

    },
    {
        text: "Fonction quantile",
      font: {
      size: 15,
      color: 'black',
    },
    showarrow: false,
    align: 'center',
    x: -0.01,
    y: 1.05,
    xref: 'paper',
    yref: 'paper',
    },
    {
      text: "Fonction de répartition",
      font: {
      size: 15,
      color: 'black',
            },
    showarrow: false,
    align: 'center',
    x: 0.65,
    y: 0.52,
    xref: 'paper',
    yref: 'paper',
    },
    {
      text: "Fonction de densité",
      font: {
      size: 15,
      color: 'black',
            },
    showarrow: false,
    align: 'center',
    x: 0.65,
    y: 0.225,
    xref: 'paper',
    yref: 'paper',
    },
  ]

};
// XXX: TODO: put the xticks labels on the middle plot for x and on the right plot for y
    var config = {responsive: true}
    const div = DOM.element('div');
    Plotly.newPlot(div, data, layout, config);
    return div;
  }

}

mu = inputs[0];
sigma = inputs[1];
alpha = inputs[2]
```
:::


::::
<br>

[Note]{.underline}: voir aussi [Notations et rappels](https://josephsalmon.github.io/HAX603X/Courses/notations.html#)



## Quantiles: cas discret


::::{.columns}

:::{.column width="38%"}

```{ojs}
//| echo: false
discretePDFs = () => {
  const distributions = Object.keys(dists);
  // Get in continuousDistributions the distributions whose pdf, cdf and quantile are defined
    const continuousDistributions = distributions.filter(name => dists[name].pmf && dists[name].cdf && dists[name].quantile);
  return continuousDistributions
};
output_discr = discretePDFs();

pmfNames_unsorted = output_discr.filter(name => !excludedPDFs.includes(name));
pmfNames=pmfNames_unsorted.toSorted();
viewof inputs_disc = Inputs.form([
      Inputs.range([-10, 10], {value: 0.1, step: 0.001, label: tex`\mu `, width: 500}),
      Inputs.range([0.01, 5], {value: 1.01, step: 0.001, label: tex`\sigma `, width: 500}),
      Inputs.range([0.001, 0.999], {value: 0.75, step: 0.001, label: tex`\alpha`, width: 500}),
    ]);

viewof distrib_name_discr = Inputs.select(pmfNames, {value: "normal", label: "Loi", width: 500});
```

:::

:::{.column width="60%"}

```{ojs}

{
  const z = d3.range(-5, 5, 0.01);
  const pmf = z.map(z => dists[distrib_name_discr].pmf(z, mu_disc, sigma_disc));
  const cdf = z.map(z => dists[distrib_name_discr].cdf(z, mu_disc, sigma_disc));
  const inv = z.map(z => dists[distrib_name_discr].quantile(z, mu_disc, sigma_disc));
  const quantile = dists[distrib_name_discr].quantile(alpha_disc, mu_disc, sigma_disc);
  const filteredX = z.filter(coord => coord <= quantile);
  const filteredPmf = pmf.filter((_, i) => z[i] <= quantile);
  const filteredCdf = cdf.filter(coord => coord <= quantile);


{
var trace1 = {
      type: "scatter",
      name: 'Quantile',
      x: cdf,
      y: z,
      line: {color: 'black'},
      xaxis: 'x1',
      yaxis: 'y3',


};

var trace12 = {
        x : [alpha_disc, alpha_disc],
        y : [z[0], quantile],
        mode: 'lines',
        line: {
            dash: 'dash',
            width: 1,
            color: ' #428BCA',
            marks: {
                size: 0,
                color: ' #428BCA',
            }

          },
      xaxis: 'x1',
      yaxis: 'y3',


};



var trace13 = {
    x: [0, alpha_disc],
    y: [quantile, quantile],
    mode: 'scatter',
    line: {
        dash: 'dash',
        width: 1,
        color: ' #428BCA',
        marks: {
            size: 0,
        }
    },
    xaxis: 'x1',
    yaxis: 'y3'
}


var trace2 = {
x: cdf,
y: cdf,
type: 'scatter',
name: 'identity',
line: {color: 'black'},
xaxis: 'x1',
yaxis: 'y2'

};


var trace21 = {
        x : [alpha_disc, 1],
        y : [alpha_disc, alpha_disc],
        mode: 'lines',
        line: {
            dash: 'dash',
            width: 1,
            color: ' #428BCA',
            marks: {
                size: 0,
                color: ' #428BCA',
            }

          },
      xaxis: 'x1',
      yaxis: 'y2'
}

var trace22 = {
        x : [alpha_disc, alpha_disc],
        y : [alpha_disc, 1],
        mode: 'lines',
        line: {
            dash: 'dash',
            width: 1,
            color: ' #428BCA',
            marks: {
                size: 0,
                color: ' #428BCA',
            }

          },
      xaxis: 'x1',
      yaxis: 'y2'
}

var trace23 = {
    x: [alpha_disc],
    y: [alpha_disc],
    mode: 'scatter',
    line: {
        dash: 'dash',
        width: 1,
        color: ' #428BCA',
        marks: {
            size: 0,
        }
    },
    xaxis: 'x1',
    yaxis: 'y2'
}


var trace31 = {
      type: "scatter",
      mode: "lines",
      name: 'PDF2',
      x: z,
      y: cdf,
      line: {color: 'black'},
      xaxis: 'x2',
      yaxis: 'y2',
};

var trace32 = {
        x: filteredX,
        y: filteredX.map(z => alpha_disc),
        mode: 'lines',
        line: {
            dash: 'dash',
            width: 1,
            color: ' #428BCA',
            marks: {
                size: 0,
                color: ' #428BCA',
            }
          },
      xaxis: 'x2',
      yaxis: 'y2'
}

var trace33 = {
        x : [quantile, quantile],
        y : [0, alpha_disc],
        mode: 'lines',
        line: {
            dash: 'dash',
            width: 1,
            color: ' #428BCA',
            marks: {
                size: 0,
                color: ' #428BCA',
            }
          },

      xaxis: 'x2',
      yaxis: 'y2'
}

var trace34 = {
    x: [quantile],
    y: [alpha],
    mode: 'scatter',
    line: {
        dash: 'dash',
        width: 1,
        color: ' #428BCA',
        marks: {
            size: 0,
        }
    },
    xaxis: 'x2',
    yaxis: 'y2'
}


var trace41 = {

  type: "scatter",
  name: 'Quantile2',
  fill: 'tozeroy',
  x : filteredX,
  y : filteredPmf,
  opacity: 0.9,
  line: {color: ' #428BCA'},
  xaxis: 'x2',
  yaxis: 'y1'

};


var trace42 = {

  type: "scatter",
  mode: "lines",
  name: 'PDF2',
  x: z,
  y: pmf,
  line: {color: 'black'},
  xaxis: 'x2',
  yaxis: 'y1'

};

var data = [
  trace1,
  trace12, trace13,
  trace2, trace21, trace22, trace23,
  trace31, trace32, trace33, trace34,
  trace41, trace42];


var layout = {

  title: 'Distribution et quantile',
  xaxis: {
    domain: [0, 0.32],
    anchor: 'y1'
  },
  yaxis: {
    domain: [0, 0.24],
    anchor: 'x1'

  },
  xaxis2: {
    domain: [0.35, 1],
    anchor: 'y'
  },

  yaxis2: {
    domain: [0.26, 0.49],
    anchor: 'x1'
  },



  yaxis3: {
    domain: [0.5, 1],
    anchor: 'x1'

  },

  showlegend: false,
  height: 680,


  annotations: [

    {
      x: 1/4,
      y: quantile - (z[0]-z.slice(-1))/20,
      xref: 'x1',
      yref: 'y3',
      text: 'q=' + quantile.toFixed(2),
      font: {
        size: 12,
        color: '#428BCA',

      },
      showarrow: false,
      arrowhead: 0,
      ax: 25,
      ay: -10,

    },
    {
      x: 1/4,
      y: alpha_disc,
      xref: 'x1',
      yref: 'y2',
      text: 'alpha=' + alpha_disc.toFixed(2),
      font: {
        size: 12,
        color: '#428BCA',

      },
      showarrow: false,
      arrowhead: 0,
      ax: 25,
      ay: -10,

    },
    {
        text: "Fonction quantile",
      font: {
      size: 15,
      color: 'black',
    },
    showarrow: false,
    align: 'center',
    x: -0.01,
    y: 1.05,
    xref: 'paper',
    yref: 'paper',
    },
    {
      text: "Fonction de répartition",
      font: {
      size: 15,
      color: 'black',
            },
    showarrow: false,
    align: 'center',
    x: 0.65,
    y: 0.52,
    xref: 'paper',
    yref: 'paper',
    },
    {
      text: "Fonction de densité",
      font: {
      size: 15,
      color: 'black',
            },
    showarrow: false,
    align: 'center',
    x: 0.65,
    y: 0.225,
    xref: 'paper',
    yref: 'paper',
    },
  ]

};
// XXX: TODO: put the xticks labels on the middle plot for x and on the right plot for y

    var config = {responsive: true}
    const div = DOM.element('div');
    Plotly.newPlot(div, data, layout, config);
    return div;
  }

}

mu_disc = inputs_disc[0];
sigma_disc = inputs_disc[1];
alpha_disc = inputs_disc[2];
```

:::
::::

<br>

[Note]{.underline}: voir aussi [Notations et rappels](https://josephsalmon.github.io/HAX603X/Courses/notations.html#)
