---
title: "Démarrage en Quarto"
bibliography: ../Courses/references.bib
format:
  html:
    out.width: 50%
filters:
  - shinylive
---

Ce texte est principalement inspiré du travail d'Arthur Turrell et de son cours sur Quarto pour les économistes [](https://aeturrell.github.io/coding-for-economists/intro.html).


# Combinaison de code et de texte dans Quarto Markdown

Vous allez ici découvrir [**Quarto**](https://quarto.org/), après une brève introduction. **Quarto** est un outil qui vous permet de combiner du code et du texte (sous forme de markdown, couvert dans XXX{ref}`wrkflow-markdown`) et de créer des sorties riches, comme des rapports, des présentations, des sites (dont celui du cours!).
Ces rapports et présentations peuvent également être automatisés car ils sont construits à partir de code.

En combinant du code et du texte, vous pouvez créer des documents dynamiques qui peuvent être mis à jour automatiquement lorsque les données ou le code changent. Cela peut être particulièrement utile pour les **rapports** ou les **présentations** qui doivent être mis à jour régulièrement.

Dans Quarto, vous pouvez écrire du code dans différents langages de programmation, tels que Python, R, Julia et bien d'autres.
Vous pouvez également inclure des équations mathématiques (avec $\LaTeX$), des images (svg, png, etc.), des tableaux, etc.

Pour utiliser Quarto, vous devez écrire votre document dans un fichier d'extension `.qmd`, qui est un format de texte simple qui peut être facilement converti en d'autres formats, tels que HTML ou PDF.
Dans le fichier `.qmd`, vous pouvez inclure des blocs de code, qui seront exécutés ou non lorsque vous générez le document final.

Dans les sections suivantes, nous allons explorer comment utiliser Quarto pour créer des rapports et des présentations, ainsi que comment personnaliser l'apparence et le comportement de vos documents.



## Introduction

Quarto est un cadre d'édition unifié pour la science des données, qui combine votre code, ses résultats et vos commentaires.
Le markdown de Quarto est conçu pour être utilisé de trois manières :

1. Pour communiquer avec des collègues qui souhaitent se concentrer sur les conclusions, et non sur le code derrière l'analyse.
2. Pour collaborer avec d'autres collègues/scientifiques (y compris vous-même dans le futur !), qui s'intéressent à la fois à vos conclusions et à la manière dont vous les avez obtenues (c'est-à-dire le code).
3. En tant qu'environnement dans lequel faire de la science des données, comme un cahier de laboratoire moderne où vous pouvez capturer non seulement ce que vous avez fait, mais aussi ce que vous pensiez.

En combinant le code, les résultats et les commentaires, Quarto permet de créer des documents riches et interactifs qui peuvent être facilement partagés et mis à jour.


:::{#exm-usecase}

## Exemple d'utilisation
L'écriture d'un rapport de TP ou d'un projet peut se faire facilement sous quarto, avec un export en .pdf (ou en .html). Vous pouvez décider de masquer ou d'afficher les parties de code dans les sorties finales. Plus en détail, les cas d'utilisation comprennent :

* des rapports utilisant des données et/ou des graphiques et qui sont similaires à chaque fois qu'ils sont exécutés (par exemple, seules les données sont mises à jour)
* des rapports techniques qui montrent ou utilisent les fonctionnalités d'une base de code existante
* des présentations qui résument les données les plus récentes et qui sont produites à une fréquence régulière
* l'envoi d'analyses exploratoires ou de prototypes à des co-auteurs ou des collaborateurs
* la rédaction de blogs pour les services de blogging qui acceptent les fichiers `.md` (assurez-vous d'exporter vers markdown)
* la création de sites web mis à jour automatiquement de manière relativement simple [voir](https://quarto.org/docs/websites/).

:::


### Prérequis

<span style="color:red;">Inutile pour les machines de l'université!</span>: Vous devez vous rendre sur le site web de **Quarto** (<https://quarto.org/>) et suivre les instructions d'installation (<https://quarto.org/docs/getting-started/installation.html>) avant de commencer. Vous pouvez vérifier que vous avez correctement installé Quarto en utilisant la commande `quarto check install` sur la ligne de commande.

Vous trouverez l'extension Quarto pour Visual Studio Code ici: (<https://marketplace.visualstudio.com/items?itemName=quarto.quarto>). Cette extension crée un bouton spécial dans Visual Studio Code appelé "render" qui vous montre à quoi ressemblera la sortie côte à côte avec l'entrée, ou encore "preview".


## Rapports automatisés avec **Quarto**

Quarto peut être utilisé pour créer des documents et des présentations de sortie dans une grande variété de formats, y compris HTML, PDF et bien d'autres.

Vous pouvez écrire les documents d'entrée y compris les extraits de code, de la manière suivante :

- Créer un fichier markdown spécial, avec l'extension de fichier `.qmd`. Pour en savoir plus sur markdown, voir {ref}`wrkflow-markdown`. Les blocs de code qui ont une syntaxe spéciale sont exécutés et leurs résultats sont inclus dans toutes les sorties.

Vous pouvez également ajouter du code (Python, R, JavaScript, etc.) aux documents pour créer dynamiquement des figures, des tableaux, etc., puis rendre les documents à leur format final à l'aide de Quarto.

### Un exemple minimal d'un rapport écrit avec du contenu markdown

Nous allons maintenant essayer un exemple plus minimaliste de la première approche, un fichier `.qmd`, qui inclut également du code et des sorties.

Il y a des avantages et des inconvénients à écrire votre rapport au format `.qmd`. L'avantage est que c'est un simple fichier texte et donc n'importe qui peut l'ouvrir, le regarder et le modifier avec un éditeur de texte (et c'est également plus pratique pour le contrôle de version, par exemple avec `git`). Le gros, gros inconvénient est que vous ne pouvez pas voir comment le code évolue au fur et à mesure que vous l'écrivez (vous devez l'executer pour voir les sorties du code, comme nous le verrons dans un instant).
Dans la sous-section suivante, nous verrons une façon d'obtenir un flux de travail plus efficace.

Commençons par configurer notre exemple minimal. Le code et le markdown suivants forment le contenu d'un fichier appelé `rapport_tp.qmd` :

````markdown
---
title: "Exemple de rapport"
author: "Capitaine Haddock"
format: pdf
toc: true
number-sections: true
jupyter: python3
---

## Histogramme

Pour une démonstration d'un tracé d'*histogramme* avec `matplotlib`, voir @fig-hist.

```{{python}}
#| label: fig-hist
#| fig-cap: "Un histogramme"
import numpy as np
import matplotlib.pyplot as plt
rng = np.random.RandomState(44)

uniform_data = rng.uniform(-1, 1, 100)

fig, ax = plt.subplots()
ax.hist(uniform_data, bins=30)
plt.show()
```
````
et le rendu donne alors:
```{python}
#| label: fig-hist
#| fig-cap: "Un histogramme"
#| echo: false
import numpy as np
import matplotlib.pyplot as plt
rng = np.random.RandomState(44)

uniform_data = rng.uniform(-1, 1, 100)

fig, ax = plt.subplots()
ax.hist(uniform_data, bins=30)
plt.show()
```

Cet exemple contient trois types de contenu importants :

1. Un **en-tête YAML** entouré de `---`.
2. Des **blocs** de code Python entourés de ```` ``` ````.
3. Du markdown mélangé avec une mise en forme de texte simple comme `# heading` et `_italics_`.

Dans ce fichier markdown `.qmd` "brut", la commande `{python}` indique à **Quarto** qu'un bloc de code est en Python et doit être exécuté, et `jupyter: python3` indique à **Quarto** quelle installation de Jupyter Notebooks utiliser. Si vous n'êtes pas sûr du nom de votre installation de Jupyter, vous pouvez voir une liste en exécutant `jupyter kernelspec list` sur la ligne de commande.


### Rendu dans des documents de sortie

Pour convertir le rapport ci-dessus en un fichier PDF de sortie, enregistrez-le sous `report.qmd` et exécutez ensuite la commande suivante sur la ligne de commande et dans le même répertoire que le fichier :

```bash
quarto render report.qmd
```

N'oubliez pas que si vous utilisez l'extension Visual Studio Code [quarto](https://marketplace.visualstudio.com/items?itemName=quarto.quarto) (recommandée), vous pouvez appuyer sur le bouton "render" à la place (mais vous devrez choisir PDF comme format de sortie), ou bien sur "preview".

:::{#exr-pdf}
Créer un PDF en enregistrant le markdown ci-dessus dans un fichier appelé `rapport.qmd`.

Attention: si vous obtenez une erreur indiquant que le noyau Jupyter n'a pas été trouvé, vérifiez d'abord que vous avez installé Jupyter Lab, puis vérifiez le nom de votre noyau Jupyter en utilisant `jupyter kernelspec list` sur la ligne de commande. Vous devez spécifier correctement le nom de votre noyau Jupyter dans l'en-tête du document (dans l'exemple ci-dessus, il est appelé 'python3', qui est le noyau par défaut).

:::

Maintenant, puisque nous avons spécifié `pdf` dans l'en-tête de notre fichier, nous avons automatiquement obtenu un PDF. Cependant, une grande variété de formats de sortie sont disponibles. Par exemple, HTML :

```bash
quarto render report.qmd --to html
```

La syntaxe de base consiste à écrire `--to outputformat` à la fin de la commande render.

:::{#exr-html}

Réussissez à créer un rapport HTML en enregistrant le markdown ci-dessus dans un fichier appelé `report.qmd`, en modifiant l'entête et en exécutant ensuite la commande quarto render avec l'option `--to html`.

Que se passe-t-il avec le menu sur le côté droit lorsque vous ajoutez des en-têtes supplémentaires en utilisant la syntaxe markdown `##` ?

:::

### Options d'exécution de bloc de code

Il existe différentes options pour l'exécution du bloc de code. Pour inclure un bloc de code qui ne sera pas exécuté, utilisez simplement la syntaxe markdown régulière (c'est-à-dire un bloc qui commence par ```` ```python ````). Sinon, vous avez des options riches pour savoir si vous souhaitez afficher le code d'entrée, uniquement les résultats, les deux ou aucun des deux (tout en exécutant toujours le code).

Pour un exemple de sortie de code où l'entrée n'est pas affichée, le code ci-dessous n'affichera que la figure de sortie en utilisant l'option `echo: false`.

````markdown
```{{python}}
#| echo: false
import numpy as np
import matplotlib.pyplot as plt
rng = np.random.RandomState(44)

uniform_data = rng.uniform(-1, 1, 100)

fig, ax = plt.subplots()
ax.hist(uniform_data, bins=30)
plt.show()
```
````

Voici quelques options pour les blocs de code:

| Option | Description |
| --- | --- |
| `eval` | Évaluer le bloc de code (si faux, affiche simplement le code dans la sortie). |
| `echo` | Inclure le code source dans la sortie. |
| `output` | Inclure les résultats de l'exécution du code dans la sortie (vrai, faux ou asis pour indiquer que la sortie est du markdown brut et ne doit pas avoir de markdown d'encadrement standard de Quarto). |
| `warning` | Inclure les avertissements dans la sortie. |
| `error` | Inclure les erreurs dans la sortie (notez que cela implique que les erreurs d'exécution du code ne bloqueront pas le traitement du document). |
| `include` | Option générale pour empêcher toute sortie (code ou résultats) d'être incluse (par exemple, include: false supprime toute sortie du bloc de code). |


## Diapositives automatisées avec **Quarto**

Ce ne sont pas seulement des rapports que vous pouvez créer, vous pouvez également réaliser des présentations. Vous avez trois principaux formats de sortie à choisir pour les diapositives :

* html, via quelque chose appelé 'revealjs' ; utilisez `format: revealjs`
* pdf, via le package LaTeX beamer ; utilisez `format: beamer`

Tout le reste est identique à ce que nous avons vu précédemment. Voici un exemple minimal montrant à la fois du code et du texte. Il crée une présentation au format HTML.

````markdown
---
title: "Ma présentation"
author: "Capitaine Haddock"
format: revealjs
---

## Introduction

- Voici du texte
- Ainsi que ceci

## Voici quelques sorties de code

```{{python}}
#| echo: false
import numpy as np
import matplotlib.pyplot as plt
rng = np.random.RandomState(44)

uniform_data = rng.uniform(-1, 1, 100)

fig, ax = plt.subplots()
ax.hist(uniform_data, bins=30)
plt.show()
```
````

Notez que cela n'affichera pas le code, mais seulement la figure, car nous avons défini `#| echo: false` pour le bloc de code. Vous pourriez également définir `echo: false` pour l'ensemble de la présentation dans l'en-tête.

:::{#exr-export-slide}

## Création de slides
Rendre cet exemple de diapositive dans les trois principaux formats

:::
